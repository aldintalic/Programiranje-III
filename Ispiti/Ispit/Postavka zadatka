/*1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I / ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
*************************************************************************** */
#include<iostream>
using namespace std;
auto *crt = "\n--------------------------------------------------\n";

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutnoElemenata;
public:
	Kolekcija():_elementi1(nullptr),_elementi2(nullptr),_trenutnoElemenata(0) {}
	Kolekcija(const Kolekcija& original) {
		_trenutnoElemenata = original._trenutnoElemenata;
		_elementi1 = new T1[_trenutnoElemenata];
		_elementi2 = new T2[_trenutnoElemenata];
		for (int i = 0; i < _trenutnoElemenata; i++) {
			_elementi1[i] = original._elementi1[i];
			_elementi2[i] = original._elementi2[i];

		}

	}
	~Kolekcija(){
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;

	}
	void Info() {
		for (int i = 0; i < _trenutnoElemenata; i++){
			cout << _elementi1[i] << " " << _elementi2[i] << endl;
		}
	}
	void Kopiraj() {
		T1 * temp1 = new T1[_trenutnoElemenata + 1];
		T2 * temp2 = new T2[_trenutnoElemenata + 1];

		for (int i = 0; i < _trenutnoElemenata; i++){
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[] _elementi1;
		delete[] _elementi2;
		_elementi1 = temp1;
		_elementi2 = temp2;
		_trenutnoElemenata++;
	}
	void AddElement(const T1& prvi,const T2& drugi) {
		Kopiraj();
		_elementi1[_trenutnoElemenata - 1] =prvi;;
		_elementi2[_trenutnoElemenata - 1] = drugi;
	}
	Kolekcija& operator=(const Kolekcija& kolekcija) {
		if (this != &kolekcija) {
			delete[] _elementi1;
			delete[] _elementi2;
			_trenutnoElemenata = kolekcija._trenutnoElemenata;
			_elementi1 = new T1[_trenutnoElemenata];
			_elementi2 = new T2[_trenutnoElemenata];
			for (int i = 0; i < _trenutnoElemenata; i++) {
				_elementi1[i] = kolekcija._elementi1[i];
				_elementi2[i] = kolekcija._elementi2[i];

			}
		}
		return *this;
	}
	void RemoveElement(int indeks) {
		if (indeks<0 || indeks>_trenutnoElemenata)
			return;
		for (int i = indeks; i < _trenutnoElemenata; i++){
			_elementi1[i] = _elementi1[i + 1];
			_elementi2[i] = _elementi2[i + 1];
		}
		_trenutnoElemenata--;
	}
	int getTrenutno() const{ return _trenutnoElemenata; }
	T1* GetElementi1() const { return _elementi1; }
	T2* GetElementi2()const{ return _elementi2; }
	

};
class Datum {
	int *_dan, *_mjesec, *_godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum& original) {
		_dan = new int(*original._dan);
		_mjesec = new int(*original._mjesec);
		_godina = new int(*original._godina);
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream &COUT, const Datum &obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}
	Datum& operator=(const Datum& original) {
		if (this != &original) {
			delete _dan;
			delete _mjesec;
			delete _godina;
			_dan = new int(*original._dan);
			_mjesec = new int(*original._mjesec);
			_godina = new int(*original._godina);
		}
		return *this;
	}
};
class Student {
	char * _imePrezime;
	Datum * _datumRodjenja;
public:
	Student(const char * imePrezime = "---", Datum d = Datum()) 


{
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		_datumRodjenja = new Datum(d);
	}
	Student(const Student& original) {
		int size = strlen(original._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, original._imePrezime);
		_datumRodjenja = new Datum(*original._datumRodjenja);
	}
	~Student() { delete[] _imePrezime; delete _datumRodjenja; }
	Student& operator=(const Student& original) {
		if (this != &original) {
			delete[] _imePrezime;
			delete _datumRodjenja;
			int size = strlen(original._imePrezime) + 1;
			_imePrezime = new char[size];
			strcpy_s(_imePrezime, size, original._imePrezime);
			_datumRodjenja = new Datum(*original._datumRodjenja);
		}
		return *this;
	}
	friend bool operator==(const Student&, const Student&);
	friend ostream& operator<<(ostream&, const Student&);
};
bool operator==(const Student& s1, const Student& s2) {
	if (strcmp(s1._imePrezime, s2._imePrezime) == 0)
		return true;
	return false;
}
ostream& operator<<(ostream& ispis, const Student& student) {
	ispis << student._imePrezime << " -> " << *student._datumRodjenja;
	return ispis;
}

class Ispit {
	Datum _datumOdrzavanja;
	char * _opisIspita;
	Kolekcija<Student, Datum> _prijave;
	Kolekcija<Student, int> _rezultati;
public:
	Ispit(const char* opisIspita, const Datum& datum) :_datumOdrzavanja(datum) {
		int vel = strlen(opisIspita) + 1;
		_opisIspita = new char[vel];
		strcpy_s(_opisIspita, vel, opisIspita);
	}
	Ispit(const Ispit& original){
		_datumOdrzavanja = original._datumOdrzavanja;
		_opisIspita = new char[strlen(original._opisIspita) + 1];
		strcpy_s(_opisIspita, strlen(original._opisIspita) + 1, original._opisIspita);
		for (int i = 0; i < original._prijave.getTrenutno(); i++)
			_prijave.AddElement(original._prijave.GetElementi1()[i],original._prijave.GetElementi2()[i]);
		for (int i = 0; i < original._rezultati.getTrenutno(); i++)
			_rezultati.AddElement(original._rezultati.GetElementi1()[i], original._rezultati.GetElementi2()[i]);
	}
	~Ispit() {
		delete[] _opisIspita; _opisIspita = nullptr;
	}
	int DaLiPostoji(const Student& student) {
		for (int i = 0; i < _prijave.getTrenutno(); i++) {
			if (_prijave.GetElementi1()[i] == student)
				return i;
		}
		return -1;
	}
	bool Provjera(const Student& student)const {
		for (int i = 0; i < _rezultati.getTrenutno(); i++)
			if (_rezultati.GetElementi1()[i] == student)
				return true;
		return false;

	}
	bool DodajPrijavu(const Student& student, const Datum& datum) {
		if (DaLiPostoji(student) != -1)
			return false;
		_prijave.AddElement(student, datum);
		return true;
	}
	void DodajRezultat(const Student& student, int ocjena) {
		if (DaLiPostoji(student) == -1)
			return;
		_rezultati.AddElement(student, ocjena);
	}
	void Sortiraj() {
		bool prolaz = true;
		int vel = _rezultati.getTrenutno() - 1;
		while (prolaz) {
			prolaz = false;
			for (int i = 0; i < vel; i++) {
				if (_rezultati.GetElementi2()[i] > _rezultati.GetElementi2()[i + 1]) {
					Student temp(_rezultati.GetElementi1()[i]);
					_rezultati.GetElementi1()[i] = _rezultati.GetElementi1()[i + 1];
					_rezultati.GetElementi1()[i + 1] = temp;
					int temp2 = _rezultati.GetElementi2()[i];
					_rezultati.GetElementi2()[i] = _rezultati.GetElementi2()[i + 1];
					_rezultati.GetElementi2()[i + 1] = temp2;
					prolaz = true;
				}
			}
			vel--;
		}
	}
	Kolekcija<Student, int> GetRezultati() { return _rezultati; }
	void ZakljuciRezultate() {
		for (int i = 0; i < _prijave.getTrenutno(); i++) {
			if (!Provjera(_prijave.GetElementi1()[i]))
				_rezultati.AddElement(_prijave.GetElementi1()[i], 5);
		}
	}
	bool JesuLiZakljuceni()const{
		for (int i = 0; i < _prijave.getTrenutno(); i++){
			if (!Provjera(_prijave.GetElementi1()[i]))
				return false;
		}
		return true;
	}
	friend ostream& operator<<(ostream&, const Ispit&);

};
ostream& operator<<(ostream& cout,  const Ispit& ispit) {
	if (ispit.JesuLiZakljuceni()) {
		cout << crt << ispit._opisIspita << ispit._datumOdrzavanja;
		cout << crt << "PRIJAVE ISPITA" << crt;
		for (int i = 0; i < ispit._prijave.getTrenutno(); i++) {
			cout << i + 1 << ". " << ispit._prijave.GetElementi1()[i] << " " << ispit._prijave.GetElementi2()[i] << endl;
		}
		cout << crt << "REZULTATI ISPITA" << crt;
		for (int i = 0; i < ispit._rezultati.getTrenutno(); i++)
			cout << i + 1 << ". " << ispit._rezultati.GetElementi1()[i] << " " << ispit._rezultati.GetElementi2()[i] << endl;
	}
	else
		cout << "REZULTATI NISU ZAKLJUCENI." << endl;
	
	return cout;
}

void main() {

	//REGIONI olaksavaju organizaciju programskog code-a, te ih mozete ukloniti ukoliko vam otezavaju preglednost

#pragma region TestiranjeKolekcije
	Kolekcija<int, double> kolekcija1;
	for (size_t i = 0; i < 50; i++)
		kolekcija1.AddElement(i, i + 0.3);
	//cout << kolekcija1 << endl;
	kolekcija1.Info();
	cout << crt;
	Kolekcija<int, double> kolekcija2;
	kolekcija2 = kolekcija1;
	kolekcija1.RemoveElement(2);//UMANJITI VELICINU NIZA
	//cout << kolekcija2 << crt;
	kolekcija1.Info();
	if (kolekcija1.getTrenutno() == kolekcija2.getTrenutno())
		cout << "ISTI BROJ ELEMENATA" << endl;
	Kolekcija<int, double> kolekcija3(kolekcija2);
	//cout << kolekcija3 << crt;
	kolekcija3.Info();
#pragma endregion

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion

#pragma region TestiranjeStudenta
	Student denis("Denis Music", Datum(26, 11, 1990));
	Student jasmin("Jasmin Azemovic", Datum(22, 11, 1990));
	Student goran;
	goran = jasmin;
	Student adel("Adel Handzic", Datum(25, 8, 1990));
	Student marija("Marija Herceg", Datum(15, 6, 1990));
#pragma endregion

#pragma region TestiranjeIspita
	Ispit prIII("PRIII::26.11.2015", danas);
	//DodajPrijavu - dodaje novog studenta u listu prijavljenih za ispti. onemoguciti dodavanje dva ista studenta
	if (prIII.DodajPrijavu(denis, danas))
		cout << denis << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(jasmin, danas))
		cout << jasmin << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(goran, danas))
		cout << goran << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(adel, danas))
		cout << adel << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(marija, danas))
		cout << marija << " DODAT na spisak" << endl;

	cout << crt << endl;
	/*DodajRezultat - dodaje ocjenu koju je student ostvario na ispitu. za dodavanje ocjene student je prethodno trebao 
	biti prijavljen na ispit
	*/
	prIII.DodajRezultat(goran, 7);
	prIII.DodajRezultat(jasmin, 6);
	prIII.DodajRezultat(adel, 8);
	prIII.DodajRezultat(marija, 9);
	/*Sortiraj - sortira rezultate ispita prema ocjeni*/
	prIII.Sortiraj();

	/*ZakljuciRezultate - dodaje ocjenu 5 svim studentima koji su prijavili ispit a nije im evidentirana ocjena*/
	prIII.ZakljuciRezultate();
	//rezultati ispita se smiju ispisivati jedino ukoliko su prethodno zakljuceni
	prIII.Sortiraj();

	cout << prIII << crt;

	Ispit prIII_2(prIII);
	cout << prIII_2 << crt;
#pragma endregion
	system("pause>0");
}
