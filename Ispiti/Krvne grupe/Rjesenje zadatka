#include <iostream>
using namespace std;

#include<algorithm>
#include<vector>
#include<regex>
#include<string>
#include<sstream>
#include<thread>
#include<mutex>

const char *crt = "\n-------------------------------------------\n";
enum OznakaKrvneGrupe { O, A, B, AB };
enum Sortiranje { ASC, DESC };
const char* OznakaKrvneGrupeString[] = { "0", "A", "B", "AB" };

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

class Datum {
	int * _dan, *_mjesec, *_godina;

	void Kopiraj(const Datum& original) {
		_dan = new int(*original._dan);
		_mjesec = new int(*original._mjesec);
		_godina = new int(*original._godina);
	}
public:
	Datum(int dan, int mjesec, int godina) {
		_dan = new int(dan), _mjesec = new int(mjesec), _godina = new int(godina);
	}

	Datum(const Datum& original) { Kopiraj(original); }

	Datum& operator=(const Datum& original) {
		if (this != &original) {
			delete _dan; delete _mjesec; delete _godina;
			Kopiraj(original);
		}
		return *this;
	}

	~Datum() { delete _dan; delete _mjesec; delete _godina; _dan = _mjesec = _godina = nullptr; }
	friend ostream &operator<<(ostream &COUT, const Datum &obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina << endl;
		return COUT;
	}

	friend int operator-(const Datum&, const Datum&);

	void SetDatum(const Datum& datum) {
		*_dan = *datum._dan;
		*_mjesec = *datum._mjesec;
		*_godina = *datum._godina;
	}
};

int operator-(const Datum& datum1, const Datum& datum2) {
	int lijevi = *datum1._godina * 10000 + *datum1._mjesec * 100 + *datum1._dan;
	int desni = *datum2._godina * 10000 + *datum2._mjesec * 100 + *datum2._dan;
	return lijevi - desni;
}

template <class T1, class T2, int max>
class Kolekcija {
	T1 * _elementi1[max];
	T2 * _elementi2[max];
	int _trenutnoElemenata;
	bool _sortiranje;
	Sortiranje _tip;
	void Kopiraj(const Kolekcija<T1, T2, max>& original) {
		_trenutnoElemenata = original._trenutnoElemenata;
		_sortiranje = original._sortiranje;
		_tip = original._tip;
		for (int i = 0; i < _trenutnoElemenata; i++) {
			_elementi1[i] = new T1(*original._elementi1[i]);
			_elementi2[i] = new T2(*original._elementi2[i]);
		}
	}

public:
	Kolekcija(bool sortiranje = true, Sortiranje tip = ASC) {
		_trenutnoElemenata = 0;
		_sortiranje = sortiranje;
		_tip = tip;
		for (int i = 0; i < max; i++) {
			_elementi1[i] = nullptr;
			_elementi2[i] = nullptr;
		}
	}

	Kolekcija(const Kolekcija& original) { Kopiraj(original); }

	Kolekcija& operator=(const Kolekcija& original) {
		if (this != &original) {
			for (int i = 0; i < _trenutnoElemenata; i++) {
				delete _elementi1[i];
				delete _elementi2[i];
			}
			Kopiraj(original);
		}
		return *this;
	}

	~Kolekcija() {
		for (int i = 0; i < _trenutnoElemenata; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
		_trenutnoElemenata = 0;
	}

	void Sort() {
		int vel = _trenutnoElemenata - 1;
		bool prolaz = true;

		while (prolaz) {
			prolaz = false;
			for (int i = 0; i < vel; i++) {
				if ((_tip == 0 && *_elementi1[i] > *_elementi1[i + 1]) || (_tip == 1 && *_elementi1[i] < *_elementi1[i + 1])) {
					T1 temp1 = *_elementi1[i];
					T2 temp2 = *_elementi2[i];
					*_elementi1[i] = *_elementi1[i + 1];
					*_elementi2[i] = *_elementi2[i + 1];
					*_elementi1[i + 1] = temp1;
					*_elementi2[i + 1] = temp2;
					prolaz = true;
				}
			}
			vel--;
		}
	}

	bool AddElement(const T1& ele1, const T2& ele2) {
		/*ukoliko je vrijednost atributa _sortiranje true, prilikom svakog dodavanja elementa se treba vrsiti sortiranje po redoslijedu
		definisanom u formalnom template argumentu sortiranje*/
		_elementi1[_trenutnoElemenata] = new T1(ele1);
		_elementi2[_trenutnoElemenata] = new T2(ele2);
		_trenutnoElemenata++;
		if (_sortiranje)
			Sort();
		return true;
	}

	void SetElement2(int lokacija, const T2& ele2) {
		_elementi2[lokacija] = new T2[ele2];
	}

	void SetSortiranje(bool sortiranje) {
		_sortiranje = sortiranje;
	}

	void SetSortiranje(Sortiranje tip) {
		_tip = tip;
	}

	int GetTrenutno() const { return _trenutnoElemenata; }

	int GetMax() const { return max; }

	T1 GetElement1(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception("Nepostojeca lokacija!");
		return *_elementi1[lokacija];
	}

	T2 GetElement2(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception("Nepostojeca lokacija!");
		return *_elementi2[lokacija];
	}

	//T1& GetEl1(int i) { return _elementi1[i]; }

	//T2& GetEl2(int i) { return _elementi2[i]; }

	friend ostream &operator<<(ostream &COUT, const Kolekcija &obj) {
		for (int i = 0; i < obj.GetTrenutno(); i++)
			COUT << obj.GetElement1(i) << " " << obj.GetElement2(i) << endl;
		return COUT;
	}
};

class KrvnaGrupa {
	/*postoje 4 krvne grupe koje su navedene u enumeracije OznakaKrvneGrupe,
	pri cemu svaka od navedenih moze imati pozitivan (+) i negativan (-) Rh faktor*/
	OznakaKrvneGrupe _oznaka;//npr: AB
	char _rhFaktor; // + ili -
	/*prethodno pomenuto je izuzetno bitno iz razloga sto postoje jasna pravila vezana za darivanje krvi
	tj. koji primalac moze primiti krv od kojeg donatora sto je prikazano u tabeli, a naredna dva vector-a su
	zaduzena da cuvaju informacije o tome, npr. za krvnu grupu A+ vector donatori ce cuvati vrijednosti: A+ i AB+ */
	vector<KrvnaGrupa *> _donatori; //krvne grupe kojima odredjena krvna grupa moze donirati krv.
	vector<KrvnaGrupa *> _primaoci; //krvne grupe od kojih odredjena krvna grupa moze primiti krv.
public:
	KrvnaGrupa(OznakaKrvneGrupe oznaka, char rhFaktor) :
		_oznaka(oznaka), _rhFaktor(rhFaktor) {}

	KrvnaGrupa(const KrvnaGrupa& original) {
		_oznaka = original._oznaka;
		_rhFaktor = original._rhFaktor;
		/*for (size_t i = 0; i < original._donatori.size(); i++)
			_donatori.push_back(new KrvnaGrupa(original._donatori[i]->_oznaka, original._donatori[i]->_rhFaktor));
		for (size_t i = 0; i < original._primaoci.size(); i++)
			_primaoci.push_back(new KrvnaGrupa(original._primaoci[i]->_oznaka, original._primaoci[i]->_rhFaktor));*/
		_donatori = original._donatori;
		_primaoci = original._primaoci;
	}

	void SetDonatori(vector<KrvnaGrupa *> donatori) {
		_donatori = donatori;
		/*for (size_t i = 0; i < donatori.size(); i++)
			_donatori.push_back(new KrvnaGrupa(donatori[i]->_oznaka, donatori[i]->_rhFaktor));*/
	}

	KrvnaGrupa& operator=(KrvnaGrupa& original) {
		if (this != &original) {
			/*for (int i = 0; i < _donatori.size(); i++)
				delete _donatori[i];
			for (int i = 0; i < _primaoci.size(); i++)
				delete _primaoci[i];*/

			_oznaka = original._oznaka;
			_rhFaktor = original._rhFaktor;
			/*for (size_t i = 0; i < original._donatori.size(); i++)
				_donatori.push_back(new KrvnaGrupa(original._donatori[i]->_oznaka, original._donatori[i]->_rhFaktor));
			for (size_t i = 0; i < original._primaoci.size(); i++)
				_primaoci.push_back(new KrvnaGrupa(original._primaoci[i]->_oznaka, original._primaoci[i]->_rhFaktor));*/
			_donatori = original._donatori;
			_primaoci = original._primaoci;
		}
		return *this;
	}

	void SetPrimaoci(vector<KrvnaGrupa *> primaoci) {
		_primaoci = primaoci;
		/*for (size_t i = 0; i < primaoci.size(); i++)
			_primaoci.push_back(new KrvnaGrupa(primaoci[i]->_oznaka, primaoci[i]->_rhFaktor));*/
	}

	void Info() {
		cout << "Oznaka: " << OznakaKrvneGrupeString[_oznaka] << _rhFaktor;
		cout << endl << "Donatori: ";
		for (size_t i = 0; i < _donatori.size(); i++)
			cout << OznakaKrvneGrupeString[_donatori[i]->_oznaka] << _donatori[i]->_rhFaktor << " ";
		cout << endl << "Primaoci: ";
		for (size_t i = 0; i < _primaoci.size(); i++)
			cout << OznakaKrvneGrupeString[_primaoci[i]->_oznaka] << _primaoci[i]->_rhFaktor << " ";
	}

	string ToString() {
		stringstream ss;
		ss << "Oznaka: " << OznakaKrvneGrupeString[_oznaka];
		ss << _rhFaktor;
		ss << endl << "Donatori: ";
		for (size_t i = 0; i < _donatori.size(); i++) {
			ss << OznakaKrvneGrupeString[_donatori[i]->_oznaka];
			ss << _donatori[i]->_rhFaktor << " ";
		}
		ss << endl << "Primaoci: ";
		for (size_t i = 0; i < _primaoci.size(); i++) {
			ss << OznakaKrvneGrupeString[_primaoci[i]->_oznaka];
			ss << _primaoci[i]->_rhFaktor << " ";
		}
		return ss.str();
	}

	string OznakaToString() {
		stringstream ss;
		ss << OznakaKrvneGrupeString[_oznaka];
		ss << _rhFaktor;
		return ss.str();
	}

	OznakaKrvneGrupe GetOznaka() { return _oznaka; }

	char GetRhfaktor() { return _rhFaktor; }

	friend bool operator<(const KrvnaGrupa&, const KrvnaGrupa&);

	friend bool operator>(const KrvnaGrupa&, const KrvnaGrupa&);

	~KrvnaGrupa() {
		/*for (int i = 0; i < _donatori.size(); i++) {
			delete _donatori[i]; _donatori[i] = nullptr;
		}
		for (int i = 0; i < _primaoci.size(); i++) {
			delete _primaoci[i]; _primaoci[i] = nullptr;
		}*/
	}

	bool MozeLiDonirati(const char* krvnaGrupa) {
		for (size_t i = 0; i < _primaoci.size(); i++)
			if (strcmp(_primaoci[i]->OznakaToString().c_str(), krvnaGrupa) == 0)
				return true;
		return false;
	}

	void IspisiDonatore() {
		cout << "Donatori: ";
		for (int i = 0; i < _donatori.size(); i++){
			cout << _donatori[i]->OznakaToString() << "  ";
		}
		cout << endl;
	}

	void IspisiPrimaoce() {
		cout << "Primaoci: ";
		for (int i = 0; i < _primaoci.size(); i++) {
			cout << _primaoci[i]->OznakaToString() << "  ";
		}
		cout << endl;
	}

};

bool operator<(KrvnaGrupa& grupa1, KrvnaGrupa& grupa2) {
	if (grupa1.GetOznaka() < grupa2.GetOznaka())
		return true;
	return false;
}

bool operator>(KrvnaGrupa& grupa1, KrvnaGrupa& grupa2) {
	return !(grupa1 < grupa2);
}

class Osoba {
protected:
	char* _imePrezime;
	KrvnaGrupa * _krvnaGrupa;
	void Kopiraj(const Osoba& original){
		_imePrezime = AlocirajNizKaraktera(original._imePrezime);
		//_krvnaGrupa = new KrvnaGrupa(*original._krvnaGrupa);
		_krvnaGrupa = original._krvnaGrupa;
	}
public:
	Osoba(const char* imePrezime, KrvnaGrupa *krvnaGrupa) :_krvnaGrupa(krvnaGrupa) {
		_imePrezime = AlocirajNizKaraktera(imePrezime);
		//_krvnaGrupa = new KrvnaGrupa(*krvnaGrupa);
	}

	Osoba(const Osoba& original) { Kopiraj(original); }

	Osoba& operator=(const Osoba& original) {
		if (this != &original) {
			delete[] _imePrezime; 
			//delete _krvnaGrupa;
			Kopiraj(original);
		}
		return *this;
	}

	virtual ~Osoba() {
		delete[] _imePrezime; _imePrezime = nullptr;
		//delete _krvnaGrupa; _krvnaGrupa = nullptr;
	}

	virtual void Info() {
		cout << "Ime i prezime -> " << _imePrezime << endl;
		cout << _krvnaGrupa->ToString();
	}

	KrvnaGrupa GetKrvnaGrupa() { return *_krvnaGrupa; }

	char* GetImePrezime() { return _imePrezime; }
};

bool ValidanFormat(string email) {
	string pravilo = "(\\w+\\@\\w+\\.(com|org|ba))";
	regex reg(pravilo);

	if (regex_match(email, reg))
		return true;
	return false;
}

class Donator : public Osoba {
	//u slucaju da email nije u validnom formatu potrebno ga je postaviti na podrazumijevanu vrijednost: 
	//info@donatori.ba
	string _email; //regex: nekiTekst@nekaDomena.com ili .ba ili .org
	Datum _datumPosljednjegDoniranja;
	bool _kontaktirajMe;
public:
	Donator(const char* imePrezime, KrvnaGrupa *krvnaGrupa, string email, Datum dpd, bool contact = true)
		: Osoba(imePrezime, krvnaGrupa), _datumPosljednjegDoniranja(dpd) {
		if (ValidanFormat(email))
			_email = email;
		else
			_email = "info@donatori.ba";
		_kontaktirajMe = contact;
	}

	Donator(const Donator& original) :Osoba(original), _datumPosljednjegDoniranja(original._datumPosljednjegDoniranja) {
		_email = original._email;
		_kontaktirajMe = original._kontaktirajMe;
	}

	Donator& operator=(const Donator& original) {
		if (this != &original) {
			Osoba::operator=(original);
			_email = original._email;
			_datumPosljednjegDoniranja = original._datumPosljednjegDoniranja;
			_kontaktirajMe = original._kontaktirajMe;
		}
		return *this;
	}

	virtual ~Donator() {}

	virtual void Info() {
		static_cast<Osoba>(*this).Info();
		cout << endl << "Email: " << _email << endl;
		cout << _datumPosljednjegDoniranja << endl;
	}

	bool ProsloTriMjeseca(const Datum& datum) {
		if (datum - _datumPosljednjegDoniranja < 92)
			return false;
		return true;
	}

	bool GetKontakt() { return _kontaktirajMe; }

	string GetEmail() { return _email; }

	Datum GetDatumDoniranja() { return _datumPosljednjegDoniranja; }

	void SetDatum(const Datum& datum) {
		_datumPosljednjegDoniranja.SetDatum(datum);
	}
};

class Zahtjev {
	string _ustanova;
	KrvnaGrupa *_krvnaGrupa;
	double _kolicina;
public:
	Zahtjev(string ustanova,  KrvnaGrupa* krvnaGrupa, double kolicina) :
		_ustanova(ustanova), _kolicina(kolicina),_krvnaGrupa(krvnaGrupa) {
		//_krvnaGrupa = new KrvnaGrupa(*krvnaGrupa);
	}

	Zahtjev(const Zahtjev& original):_krvnaGrupa(original._krvnaGrupa) {
		_ustanova = original._ustanova;
		//_krvnaGrupa = new KrvnaGrupa(*original._krvnaGrupa);
		_kolicina = original._kolicina;
	}

	Zahtjev& operator=(const Zahtjev& original) {
		if (this != &original) {
			//delete _krvnaGrupa;
			_ustanova = original._ustanova;
			_kolicina = original._kolicina;
			//_krvnaGrupa = new KrvnaGrupa(*original._krvnaGrupa);
			_krvnaGrupa = original._krvnaGrupa;
		}
		return *this;
	}

	//~Zahtjev() { delete _krvnaGrupa;_krvnaGrupa=nullptr }

	friend ostream& operator<<(ostream& COUT, const Zahtjev& obj) {
		COUT << "Ustanova: " << obj._ustanova << endl;
		COUT << "Krvna grupa: " << obj._krvnaGrupa->ToString() << endl;
		COUT << "Kolicina: " << obj._kolicina << endl;
		return COUT;
	}
};

class TransfuzijskiCentar {
	//stanje zaliha za svaku pojedinu krvnu grupu
	Kolekcija<KrvnaGrupa, double, 8> _zalihe; //DESC
	//evidentira svaku donaciju krvi
	Kolekcija<Osoba*, double, 100> _donacije;
	vector<Zahtjev> _zahtjevi;
public:
	TransfuzijskiCentar() { _zalihe.SetSortiranje(DESC); }

	TransfuzijskiCentar(const TransfuzijskiCentar& original) {
		for (int i = 0; i < original._donacije.GetTrenutno(); i++)
			_donacije.AddElement(dynamic_cast<Donator*>(original._donacije.GetElement1(i)), original._donacije.GetElement2(i));
		_zalihe = original._zalihe;
		_zahtjevi = original._zahtjevi;
	}

	TransfuzijskiCentar& operator=(const TransfuzijskiCentar& original) {
		if (this != &original) {
			for (int i = 0; i < original._donacije.GetTrenutno(); i++)
				_donacije.AddElement(dynamic_cast<Donator*>(original._donacije.GetElement1(i)), original._donacije.GetElement2(i));
			_zalihe = original._zalihe;
			_zahtjevi = original._zahtjevi;
		}
		return *this;
	}

	int DaLiPostojiZaliha(Osoba& donator) {
		for (int i = 0; i < _zalihe.GetTrenutno(); i++)
			if (_zalihe.GetElement1(i).GetOznaka() == donator.GetKrvnaGrupa().GetOznaka() && _zalihe.GetElement1(i).GetRhfaktor() == donator.GetKrvnaGrupa().GetRhfaktor())
				return i;
		return -1;
	}

	int DaLiPostojiDonacija(Osoba* donator) {
		for (int i = 0; i < _donacije.GetTrenutno(); i++)
			if (strcmp(donator->GetImePrezime(), _donacije.GetElement1(i)->GetImePrezime()) == 0)
				return i;
		return -1;
	}

	void AddDonaciju(const Datum& datum, Osoba* donator, double kolicina) {
		Donator* temp = dynamic_cast<Donator*>(donator);
		if (temp != nullptr)
			if (!temp->ProsloTriMjeseca(datum))
				throw exception("NE MOZETE DONIRATI KRV. NIJE PROSLO 3 MJESECA OD PRETHODNOG DARIVANJA.");

		int indeks = DaLiPostojiZaliha(*donator);
		if (indeks != -1)
			_zalihe.SetElement2(indeks, _zalihe.GetElement2(indeks) + kolicina);
		else
			_zalihe.AddElement(donator->GetKrvnaGrupa(), kolicina);

		int indeksDonacije = DaLiPostojiDonacija(donator);
		if (indeksDonacije != -1)
			temp->SetDatum(datum);
		else
			_donacije.AddElement(temp, kolicina);
	}

	double ProvjeriStanje(const char* krvnaGrupa) {
		int indeks = -1;
		for (int i = 0; i < _zalihe.GetTrenutno(); i++) {
			if (strcmp(krvnaGrupa, _zalihe.GetElement1(i).OznakaToString().c_str()) == 0) {
				indeks = i;
				break;
			}
		}
		if (indeks != -1)
			return _zalihe.GetElement2(indeks);
		return 0;
	}

	void DodajZahtjev(const Zahtjev& zahtjev) { _zahtjevi.push_back(zahtjev); }

	bool ProvjeraZaDonora(Osoba& osoba, const char* krvnaGrupa) {
		Donator* temp = dynamic_cast<Donator*>(&osoba);
		if (temp != nullptr) {
			if (!temp->GetKontakt())
				return false;
			if (!temp->GetKrvnaGrupa().MozeLiDonirati(krvnaGrupa))
				return false;
		}
		return true;
	}

	void SendMail(const char* imePrezime) {
		cout << "Postovani " << imePrezime << ",\n "
			<< "Ovim putem Vas obavjestavamo da su nam potrebne zalihe Vase krvne grupe, te da se javite u nas centar ako ste u mogucnosti.\n\n";
		cout << "Srdacan pozdrav.\n\n--- Centar za transfuziju krvi ---" << endl << endl;
	}

	void PosaljiEmail(const char* krvnaGrupa) {
		for (int i = 0; i < _donacije.GetTrenutno(); i++) {
			if (ProvjeraZaDonora(*_donacije.GetElement1(i), krvnaGrupa))
				SendMail(_donacije.GetElement1(i)->GetImePrezime());
		}
	}

	void IspisiMatricuKompatibilnosti(vector<KrvnaGrupa*> krvneGrupe) {

		for (int i = 0; i < 8; i++){
			cout << crt<<krvneGrupe[i]->OznakaToString() << " | ";
			krvneGrupe[i]->IspisiDonatore();
			cout << "   | ";
			krvneGrupe[i]->IspisiPrimaoce();
		}


	}
};
int main() {

	/**************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU code.TXT
	5. NAZIVI FUNKCIJA MORAJU BITI IDENTIÈNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U.OSTALE, POMOÆNE FUNKCIJE MOŽETE IMENOVATI PO ŽELJI. TAKOÐER, MOŽETE DODAVATI KOLIKO ŽELITE TESTNIH PODATAKA
	****************************************************************************/
	Datum dat_12_03_2018(12, 3, 2018), dat_01_02_2018(1, 2, 2018);
	Datum danas(dat_12_03_2018);
	cout << danas << endl;

	Kolekcija<int, int, 10> kolekcija1;
	for (int i = 0; i < kolekcija1.GetMax() - 1; i++)
		if (!kolekcija1.AddElement(10 + i, 170000 + i))
			cout << "Elementi " << 10 + i << " i " << 170000 + i << " nisu dodati u kolekciju" << endl;

	cout << kolekcija1 << endl;
	kolekcija1.SetSortiranje(DESC);
	kolekcija1.AddElement(16, 170016);
	cout << kolekcija1 << endl;

	Kolekcija<int, int, 10> kolekcija2(kolekcija1);
	cout << kolekcija2 << endl;


	vector<KrvnaGrupa*> krvneGrupe;
	krvneGrupe.push_back(new KrvnaGrupa(O, '+')); //0 - O_poz
	krvneGrupe.push_back(new KrvnaGrupa(O, '-')); //1 - O_neg
	krvneGrupe.push_back(new KrvnaGrupa(A, '+')); //2 - A_poz
	krvneGrupe.push_back(new KrvnaGrupa(A, '-')); //3 - A_neg
	krvneGrupe.push_back(new KrvnaGrupa(B, '+')); //4 - B_poz
	krvneGrupe.push_back(new KrvnaGrupa(B, '-')); //5 - B_neg
	krvneGrupe.push_back(new KrvnaGrupa(AB, '+'));//6 - AB_poz
	krvneGrupe.push_back(new KrvnaGrupa(AB, '-'));//7 - AB_neg


	vector<KrvnaGrupa*> donori_O_poz{ krvneGrupe[0], krvneGrupe[2], krvneGrupe[4], krvneGrupe[6] };
	krvneGrupe[0]->SetDonatori(donori_O_poz);
	//ili krace napisano
	krvneGrupe[0]->SetPrimaoci(vector<KrvnaGrupa*>{krvneGrupe[0], krvneGrupe[1]});
	
	krvneGrupe[1]->SetDonatori(vector<KrvnaGrupa*>{krvneGrupe[0], krvneGrupe[2], krvneGrupe[3], krvneGrupe[4],
												   krvneGrupe[5], krvneGrupe[6], krvneGrupe[7] });
	krvneGrupe[1]->SetPrimaoci(vector<KrvnaGrupa*>{krvneGrupe[1]});

	krvneGrupe[2]->SetDonatori(vector<KrvnaGrupa*>{krvneGrupe[2], krvneGrupe[6]});
	krvneGrupe[2]->SetPrimaoci(vector<KrvnaGrupa*>{krvneGrupe[0], krvneGrupe[1], krvneGrupe[2], krvneGrupe[3]});

	krvneGrupe[3]->SetDonatori(vector<KrvnaGrupa*>{krvneGrupe[2], krvneGrupe[3], krvneGrupe[6],krvneGrupe[7]});
	krvneGrupe[3]->SetPrimaoci(vector<KrvnaGrupa*>{krvneGrupe[1], krvneGrupe[3]});

	krvneGrupe[4]->SetDonatori(vector<KrvnaGrupa *>{krvneGrupe[4], krvneGrupe[6]});
	krvneGrupe[4]->SetPrimaoci(vector<KrvnaGrupa *>{krvneGrupe[0], krvneGrupe[4], krvneGrupe[1], krvneGrupe[5]});

	krvneGrupe[5]->SetDonatori(vector<KrvnaGrupa *>{krvneGrupe[4], krvneGrupe[5], krvneGrupe[6], krvneGrupe[7]});
	krvneGrupe[5]->SetPrimaoci(vector<KrvnaGrupa *>{krvneGrupe[1], krvneGrupe[5]});

	krvneGrupe[6]->SetDonatori(vector<KrvnaGrupa *>{krvneGrupe[6]});
	krvneGrupe[6]->SetPrimaoci(vector<KrvnaGrupa*>{krvneGrupe[0], krvneGrupe[1], krvneGrupe[2], krvneGrupe[3],
												   krvneGrupe[4], krvneGrupe[5], krvneGrupe[7] });

	krvneGrupe[7]->SetDonatori(vector<KrvnaGrupa *>{krvneGrupe[6], krvneGrupe[7]});
	krvneGrupe[7]->SetPrimaoci(vector<KrvnaGrupa *>{krvneGrupe[1], krvneGrupe[3], krvneGrupe[5], krvneGrupe[7]});

	Osoba * jasmin = new Donator("Jasmin Azemovic", krvneGrupe[4], "jasmin@fit.ba", Datum(12, 2, 2017), true);
	Osoba * adel = new Donator("Adel Handzic", krvneGrupe[3], "adelfit.ba", Datum(9, 1, 2017), true);
	Osoba * goran = new Donator("Goran Skondric", krvneGrupe[5], "goran@fit.net", Datum(9, 3, 2017), true);

	TransfuzijskiCentar tcMostar;
	///*
	//prilikom svake donacije je potrebno povecati zalihe za tu krvnu grupu
	//ukoliko krvna grupa vec postoji na zalihi onda se uvecava samo njena kolicina
	//takodjer, donatoru se postavlja nova vrijednost datuma posljednje donacije.
	//ukoliko je neki od dodantora darivao krv prije isteka 3 mjeseca od posljednjeg
	//darivanja, funkcija baca izuzetak
	//*/
	//datum donacije, donator, kolicina
	try {
		tcMostar.AddDonaciju(Datum(20, 5, 2017), jasmin, 2.5);
		tcMostar.AddDonaciju(Datum(20, 5, 2017), adel, 3);
		tcMostar.AddDonaciju(Datum(6, 5, 2017), goran, 1.2);
	}
	catch (exception & err) {
		cout << "Greska-> " << err.what() << endl;
	}
	try {
		tcMostar.AddDonaciju(Datum(10, 9, 2017), jasmin, 2);
		tcMostar.AddDonaciju(Datum(18, 10, 2017), adel, 1.8);
		tcMostar.AddDonaciju(Datum(15, 9, 2017), goran, 3.8);
	}
	catch (exception & err) {
		cout << "Greska-> " << err.what() << endl;
	}
	Zahtjev zahtjev_0_poz("Tranfuziologija KCUS", krvneGrupe[0], 15),
		zahtjev_0_neg("Tranfuziologija Bakir Nakas", krvneGrupe[1], 8);
	//ukoliko na stanju postoji dovoljno iste ili zamjenske krvne grupe


	if (tcMostar.ProvjeriStanje("0+") >= 15)
		tcMostar.DodajZahtjev(zahtjev_0_poz);
	else {
		thread mail1(&TransfuzijskiCentar::PosaljiEmail, tcMostar, "0+");
		mail1.join();
	}

		/*ukoliko transfuzijski centar posjeduje zahtijevane kolicine na stanju, odmah ce ih ustupiti prema zahtjevu,
		a u slucaju da ne posjeduje onda ce (koristeci multithreading) kontaktirati (poslati email poruku sa odgovarajucim sadrzajem)
		sve donore koji zadovoljavaju sljedece uslove:
		- mogu donirati krv zahtijevanoj krvnoj grupi
		- oznacili su da zele biti kontaktirani
		- nisu davali krv u posljednja 3 mjeseca
		*/
		
	if (tcMostar.ProvjeriStanje("0-") >= 8)
		tcMostar.DodajZahtjev(zahtjev_0_neg);
	else {
		thread mail2(&TransfuzijskiCentar::PosaljiEmail, tcMostar, "0-");
		mail2.join();
	}



	/*ispisuje matricu ili tablicu iz koje je vidljiva kompatibilnost izmeðu pojedinih krvnih grupa. 
	pored naziva i rh faktora krvne grupe, u zagradi ispisati i trenutnu kolièinu na stanju. matrica prikazana na kraju zadatka*/
	tcMostar.IspisiMatricuKompatibilnosti(krvneGrupe);

	delete jasmin;
	delete adel;
	delete goran;
	
	for (size_t i = 0; i < krvneGrupe.size(); i++)
		delete krvneGrupe[i];

	cin.get();
	return 0;
}

