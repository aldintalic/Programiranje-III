#include<iostream>

using namespace std;

auto crt = "----------------------------------------------------\n";

char* AlocirajChar(const char *sadrzaj)
{
	int vel = strlen(sadrzaj) + 1;
	char *temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

class Vrijeme
{
	int* _sati;
	int* _minute;
	int* _sekunde;
public:
	Vrijeme(int sati, int minute, int sekunde = 0) {
		_sati = new int(sati);
		_minute = new int(minute);
		_sekunde = new int(sekunde);
	}
	Vrijeme() :_sati(nullptr), _minute(nullptr), _sekunde(nullptr) {}
	Vrijeme(const Vrijeme& v)
	{
		_sati = new int(*v._sati);
		_minute = new int(*v._minute);
		_sekunde = new int(*v._sekunde);
	}

	//Preklopiti operator << za ispis objekata tipa Vrijeme
	friend ostream& operator<<(ostream& cout, const Vrijeme& v);
	int GetSati()const { return *_sati; }
	int GetMinute()const { return *_minute; }
	int GetSekunde() const { return *_sekunde; }
	void SetSati(int sati)const { *_sati = sati; }
	void SetMinute(int minute)const { *_minute = minute; }
	void SetSekunde(int sekunde)const { *_sekunde = sekunde; }
	void Kopiraj(const Vrijeme& vrijeme) {
		_sati = new int(*vrijeme._sati);
		_minute = new int(*vrijeme._minute);
		_sekunde = new int(*vrijeme._sekunde);
	}

	Vrijeme& operator+=(int kasnjenje) {
		*_minute += kasnjenje;
		*_sati += *_minute / 60;
		*_minute %= 60;
		if (*_sati > 24)
			*_sati %= 24;
		return *this;
	}
	Vrijeme operator++(int) {
		Vrijeme temp(*this);
		(*_sati)++;
		if (*_sati > 24)
			(*_sati) %= 24;
		return temp;
	}
	Vrijeme& operator++() {
		(*_sati)++;
		if (*_sati > 24)
			(*_sati) %= 24;
		return *this;
	}
	friend bool operator<(const Vrijeme& vrijeme1, const Vrijeme& vrijeme2);
	friend bool operator>(const Vrijeme& vrijeme1, const Vrijeme& vrijeme2);
	friend Vrijeme operator-(const Vrijeme& vrijeme, int kasnjenje);
};
Vrijeme operator-(const Vrijeme& vrijeme, int kasnjenje) {
	Vrijeme novo(vrijeme);
	int sekV = *vrijeme._sekunde + *vrijeme._minute * 60 + *vrijeme._sati * 3600;
	int sekM = kasnjenje * 60;
	int konacno = sekV - sekM;
	*novo._sati = konacno / 3600;
	konacno %= 3600;
	*novo._minute = konacno / 60;
	konacno %= 60;
	*novo._sekunde = konacno;
	return novo;

}

ostream& operator<<(ostream& COUT, const Vrijeme& v) {
	COUT << *v._sati << ":" << *v._minute << ":" << *v._sekunde;

	return COUT;
}
bool operator<(const Vrijeme& vrijeme1, const Vrijeme& vrijeme2) {
	int sekV1 = *vrijeme1._sekunde + *vrijeme1._minute * 60 + *vrijeme1._sati * 3600;
	int sekV2 = *vrijeme2._sekunde + *vrijeme2._minute * 60 + *vrijeme2._sati * 3600;
	if (sekV1 < sekV2)
		return true;
	return false;

}
bool operator>(const Vrijeme& vrijeme1, const Vrijeme& vrijeme2) {
	int sekV1 = *vrijeme1._sekunde + *vrijeme1._minute * 60 + *vrijeme1._sati * 3600;
	int sekV2 = *vrijeme2._sekunde + *vrijeme2._minute * 60 + *vrijeme2._sati * 3600;
	if (sekV1 > sekV2)
		return true;
	return false;
}


class Let
{
	static const  int _oznakaSize = 10;
	char _oznaka[_oznakaSize];
	char* _odrediste;
	int _brIzlazneKapije;
	Vrijeme _vrijemePolijetanja; //sati i minute
	int _trajanje; //izra�eno u minutama
	int _kasnjenje; //izra�eno u minutama

public:
	//Potrebne konstruktor i destruktor funkcije
	Let(const char* oznaka, const char* odrediste, int brojIzlazneKapije, const Vrijeme& vrijemePolijetanja, int trajanje,
		int kasnjenje) :_vrijemePolijetanja(vrijemePolijetanja) {
		strcpy_s(_oznaka, oznaka);
		int vel = strlen(odrediste) + 1;
		_odrediste = new char[vel];
		strcpy_s(_odrediste, vel, odrediste);
		_brIzlazneKapije = brojIzlazneKapije;
		_trajanje = trajanje;
		_kasnjenje = kasnjenje;
	}
	Let() :_oznaka("NO VALUE"), _odrediste(nullptr), _brIzlazneKapije(0), _vrijemePolijetanja(), _trajanje(0), _kasnjenje(0) {}
	Let(const Let& let) {
		strcpy_s(_oznaka, let._oznaka);
		int vel = strlen(let._odrediste) + 1;
		_odrediste = new char[vel];
		strcpy_s(_odrediste, vel, let._odrediste);
		_brIzlazneKapije = let._brIzlazneKapije;
		_trajanje = let._trajanje;
		_kasnjenje = let._kasnjenje;
		_vrijemePolijetanja.Kopiraj(let._vrijemePolijetanja);
	}
	~Let() {
		delete[] _odrediste; _odrediste = nullptr;
	}

	//Funkciju sa jednim parametrom koja postavlja informaciju o eventualnom ka�njenju na vrijednost zadanu parametrom.
	void PostaviKasnjenje(int kasnjenje) {
		if (kasnjenje > 0)
			_kasnjenje = kasnjenje;
	}

	/*Preklopiti unarni operator "!" putem kojeg je moguce saznati da li odgovarajuci let kasni ili ne (vratiti logicku
	vrijednost "true" u slucaju ka�njenja, u suprotnom vratiti "false").*/
	bool operator!() {
		if (_kasnjenje != 0)
			return true;
		return false;
	}

	//Funkciju koja kao rezultat vraca trajanje leta.

	int GetTrajanje() { return _trajanje; }
	const char* GetOznaka() const { return _oznaka; }

	/*Preklopiti operator + na nacin da omogucava sabiranje objekata tipa "Let" i cijelog broja, pri
	cemu se kao rezultat dobiva novi objekat tipa "Let", u kojem je vrijeme polijetanja pomjereno
	unaprijed za iznos odreden drugim sabirkom (racunato u minutama).
	Takoder preklopiti i operator "+=" koji osigurava da izraz oblika "X += Y uvijek ima isto znacenje kao i izraz
	"X = X + Y" */

	friend Let operator+(const Let& let1, int vrijeme);
	
	Let& operator+=(int vrijeme) {
		_vrijemePolijetanja.SetMinute(_vrijemePolijetanja.GetMinute() + vrijeme);
		_vrijemePolijetanja.SetSati(_vrijemePolijetanja.GetSati() + _vrijemePolijetanja.GetMinute() / 60);
		_vrijemePolijetanja.SetMinute(_vrijemePolijetanja.GetMinute() % 60);
		if (_vrijemePolijetanja.GetSati() > 24)
			_vrijemePolijetanja.SetSati(_vrijemePolijetanja.GetSati() % 24);
		return *this;
	}


	/* Funkciju kojom je moguce saznati ocekivano vrijeme polijetanja kada se uracuna iznos ka�njenja
	u odnosu na predvideno vrijeme polijetanja (preklopiti operator + u klasi Vrijeme). */

	Vrijeme VrijemePolijetanjaSKasnjenjem() const {
		Vrijeme novoVrijeme(_vrijemePolijetanja);
		novoVrijeme += _kasnjenje;
		return novoVrijeme;
	}

	//Funkciju koja vraca ocekivano vrijeme slijetanja

	Vrijeme VrijemeSlijetanja()const {
		Vrijeme vrijemeSlijetanja(VrijemePolijetanjaSKasnjenjem());
		vrijemeSlijetanja += _trajanje;
		return vrijemeSlijetanja;
	}


	/*Preklopiti operator "++" na nacin da pomijera vrijeme polaska za jedan sat unaprijed.
	  Potrebno je podr�ati i prefiksnu i postfiksnu verziju ovog operatora.*/
	Let operator++(int) {
		Let temp(*this);
		_vrijemePolijetanja++;
		return temp;
	}
	Let& operator++() {
		_vrijemePolijetanja++;
		return *this;
	}

	/*Preklopiti relacione operatore "<" i ">" koji ispituju koji let nastupa ranije, odnosno kasnije.
	  Operator "<" vraca logicku vrijednost "true" ukoliko polijetanje leta sa lijeve strane nastupa
	  prije polijetanje leta sa desne strane, a u suprotnom vraca logicku vrijednost "false".
	  Analogno vrijedi za operator ">". Prilikom uporedivanja treba uzeti u obzir i ocekivano vrijeme ka�njenja,
	  a ne samo planirano vrijeme polijetanja.*/


	  /*Preklopiti operator "<<" koji treba da podr�i ispis objekata tipa "Let" na ekran. U slucaju da
	  se radi o polijetanju bez ka�njenja, ispis bi trebao da izgleda kako slijedi:

		  JFK 156 Atalanta    12:50   19:30   5

	  Podaci predstavljaju redom: oznaku leta, naziv odredi�ta, vrijeme polijetanja, ocekivano
	  vrijeme slijetanja i broj izlazne kapije.

	  U slucaju da se radi o letu koji kasni, ispis bi trebao izgledati kako slijedi:

		  ZGK 932 Zagreb    15:50 (Planirano 15:30, Kasni 20 min)*/
	friend ostream& operator<<(ostream& COUT, const Let& let);
	void SetVrijemePolijetanja(int minute) {_vrijemePolijetanja += minute;}
};

Let operator+(const Let& let1, int vrijeme) {
	Let noviLet(let1);
	noviLet._vrijemePolijetanja.SetMinute(let1._vrijemePolijetanja.GetMinute() + vrijeme);
	noviLet._vrijemePolijetanja.SetSati(noviLet._vrijemePolijetanja.GetSati() + noviLet._vrijemePolijetanja.GetMinute() / 60);
	noviLet._vrijemePolijetanja.SetMinute(noviLet._vrijemePolijetanja.GetMinute() % 60);
	if (noviLet._vrijemePolijetanja.GetSati() > 24)
		noviLet._vrijemePolijetanja.SetSati(noviLet._vrijemePolijetanja.GetSati() % 24);
	return noviLet;
}
bool operator<(const Let& let1, const Let& let2) {
	if (let1.VrijemePolijetanjaSKasnjenjem() < let2.VrijemePolijetanjaSKasnjenjem())
		return true;
	return false;
}
bool operator>(const Let& let1, const Let& let2) {
	if (let1.VrijemePolijetanjaSKasnjenjem() > let2.VrijemePolijetanjaSKasnjenjem())
		return true;
	return false;
}
ostream& operator<<(ostream& COUT, const Let& let) {
	COUT << let._oznaka << " " << let._odrediste << " " << let.VrijemePolijetanjaSKasnjenjem() << " ";
	if (let._kasnjenje == 0) {
		COUT << let.VrijemeSlijetanja();
		COUT << " " << let._brIzlazneKapije;
	}
	else
		COUT << "(Planirano " << let.VrijemePolijetanjaSKasnjenjem() - let._kasnjenje << ", Kasni " << let._kasnjenje << " min)" << endl;
	return COUT;
}

class RasporedLetova
{
	int _brojRegistrovanihLetova;
	const int _maksimalanBrojLetova;
	Let** _letovi;

public:
	RasporedLetova(int maksimalanBrojLetova) : _maksimalanBrojLetova(maksimalanBrojLetova),
		_letovi(new Let*[_maksimalanBrojLetova]), _brojRegistrovanihLetova(0)
	{

	}

	/*Preklopiti operator "+=" na nacin da registruje novi let u raspored. Raspored letova u svakom momentu treba biti sortiran
	  prema vremenu polijetanja. Voditi racuna o maksimalnom broju letova.  Za potrebe poredenja vremena polaska letova preklopiti
	  odgovarajuce operatore u klasi Vrijeme.*/
	bool operator+=(const Let& let) {
		if (_brojRegistrovanihLetova == _maksimalanBrojLetova)
			return false;
		int indeks = _brojRegistrovanihLetova;
		for (int i = 0; i < _brojRegistrovanihLetova; i++) {
			if (let.VrijemePolijetanjaSKasnjenjem() < _letovi[i]->VrijemePolijetanjaSKasnjenjem()) {
				indeks = i;
				for (int j = _brojRegistrovanihLetova; j > i; j--) {
					_letovi[j] = _letovi[j - 1];
				}
				break;
			}
		}
		//delete _letovi[indeks];

		_letovi[indeks] = new Let(let);
		_brojRegistrovanihLetova++;
		return true;


	}

	/*Preklopiti operator "-=" na nacin da ukljanja registrovani let sa oznakom definisanom putem desnog operanda.
	 Pri tome sacuvati redoslijed prethodno registrovanih letova. */
	bool operator-=(const char* oznaka) {
		int indeks = 0;
		for (int i = 0; i < _brojRegistrovanihLetova; i++) {
			if (strcmp(_letovi[i]->GetOznaka(), oznaka) == 0) {
				indeks = i;
				break;
			}
		}
		delete _letovi[indeks];
		for (int j = indeks; j < _brojRegistrovanihLetova - 1; j++) {
			_letovi[j] = _letovi[j + 1];
		}
		_letovi[_brojRegistrovanihLetova - 1] = nullptr;
		_brojRegistrovanihLetova--;
		return true;


	}

	//Preklopiti operator "[]" na nacin da vraca objekat tipa Let na osnovu proslijedene pozicije u rasporedu (pozicije krecu od 1).
	Let& operator[](int indeks) {
		if(indeks>0 && indeks<=_brojRegistrovanihLetova)
			return *_letovi[indeks - 1];
	}

	/*Preklopiti operator "()" na nacin da letu sa definisanom oznakom pomjeri vrijeme polijetanja za vrijednost drugog parametra izra�enog
	 u minutama. */

	RasporedLetova& operator()(const char* oznaka, int minute) {
		int indeks = -1;
		for (int i = 0; i < _brojRegistrovanihLetova; i++){
			if (strcmp(oznaka, _letovi[i]->GetOznaka()) == 0) {
				indeks = i;
				break;
			}
		}
		if (indeks != -1) {
			_letovi[indeks]->SetVrijemePolijetanja(minute);
			return *this;
		}

	}
	 //Funkciju koja daje prosjecno trajanje svih pohranjenih letova.
	float ProsjecnoTrajanjeLetova() {
		float ukupnoVrijeme = 0;
		for (int  i = 0; i < _brojRegistrovanihLetova; i++){
			ukupnoVrijeme += _letovi[i]->GetTrajanje();
		}
		return ukupnoVrijeme / _brojRegistrovanihLetova;
	}

	 /*Preklopiti operator "<<" koji ispisuje kompletan spisak svih letova, sortiran po ocekivanim vremenima polazaka.
	   Za potrebe poredenja vremena polaska letova preklopiti odgovarajuce operatore u klasi Vrijeme. */
	friend ostream& operator<<(ostream& ispis, const RasporedLetova &rasporedLetova);
};

ostream& operator<<(ostream& ispis, const RasporedLetova &rasporedLetova) {

	for (int i = 0; i < rasporedLetova._brojRegistrovanihLetova; i++)
		cout << *rasporedLetova._letovi[i]<<endl;


	return ispis;
}


int main()
{
	Vrijeme v1(10, 15);
	Vrijeme v2(5, 54);
	Vrijeme v3(21, 23);
	cout << v1 << v2 << v3;

	Let let1("GEW 327", "Berlin", 4, v1, 130, 10);
	Let let2("TUA 192", "Moskva", 2, v3, 310, 0);
	Let let3("PEG 568", "Oslo",9, v2, 245, 20);

	if (!let1)
		cout << "Let kasni" << endl;
	else
		cout << "Let je na vrijeme" << endl;

	cout << let1.VrijemePolijetanjaSKasnjenjem();

	cout << let1.VrijemeSlijetanja();

	if (let1 < let2)
		cout << "Let1 je prije leta2" << endl;
	else
		cout << "Let1 je poslije leta2" << endl;

	if (let1 > let2)
		cout << "Let1 je poslije leta2" << endl;
	else
		cout << "Let1 je prije leta2" << endl;

	RasporedLetova Raspored(100);

	Raspored += let1;
	Raspored += let2;
	Raspored += let3;

	Raspored -= let1.GetOznaka();

	cout << Raspored[1];

	Raspored("TUA 192", 95);

	cout << endl << "Prosjecno trajanje svih letova je -> " << Raspored.ProsjecnoTrajanjeLetova() << endl;

	cout <<endl<< Raspored << endl;

	system("pause>0");
	return 0;
}


